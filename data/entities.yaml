- name: tree
  display:
    attr: plant
    char: 'T'
  description:
  - A tree.
  properties: [portable, growable]

- name: branch
  display:
    attr: wood
    char: 'y'
  description:
  - A branch from a tree.
  properties: [portable]

- name: log
  display:
    attr: wood
    char: 'l'
  description:
  - A wooden log, obtained by harvesting a tree.
  properties: [portable]

- name: wood
  display:
    attr: wood
    char: 'w'
  description:
  - A wooden plank.
  properties: [portable]

- name: workbench
  display:
    attr: wood
    char: 'π'
  description:
  - A plain wooden workbench, providing space for you to make other
    things using the 'make' command.
  properties: [portable]
  capabilities: [make]

- name: rock
  display:
    attr: rock
    char: 'o'
  description:
  - A small rock.
  properties: [portable]

- name: boulder
  display:
    attr: rock
    char: '@'
  description:
  - A rock.
  properties: [unwalkable]

- name: mountain
  display:
    attr: snow
    char: '∧'
  description:
  - A mountain.
  properties: [unwalkable]

- name: copper ore
  display:
    attr: copper
    char: 'C'
  description:
  - Raw copper ore.  It is extremely useful for making wires, pipes, and other metal things.
    Often, in locations where copper can be found on the surface, additional copper can
    be found by drilling beneath the surface.
  properties: [portable]

- name: copper wire
  display:
    attr: copper
    char: '-'
  description:
  - Copper wire is very good at conducting electricity and useful for
    making various types of circuits and machines.
  properties: [portable]

- name: copper pipe
  display:
    attr: copper
    char: 'I'
  description:
  - A pipe made out of a thin sheet of copper.  Great for transmitting
    water or steam.
  properties: [portable]

- name: furnace
  display:
    attr: fire
    char: '#'
  description:
  - A furnace can be used to turn metal ore into various useful products.
  properties: [portable]

- name: motor
  display:
    attr: entity
    char: 'M'
  description:
  - A motor is useful for making devices that can turn when electric
    current is applied.
  properties: [portable]

- name: flower
  display:
    attr: flower
    char: '*'
  description:
  - A flower.
  properties: [portable, growable]

- name: lambda
  display:
    attr: flower
    char: 'λ'
  description:
  - A lambda.
  properties: [portable]

- name: wave
  display:
    attr: water
    char: '~'
  description:
  - A wave on the surface of the water.

- name: bit (0)
  display:
    attr: entity
    char: '0'
  description:
  - A bit.
  properties: [portable]

- name: bit (1)
  display:
    attr: entity
    char: '1'
  description:
  - A bit.
  properties: [portable, growable]

- name: drill bit
  display:
    attr: entity
    char: '!'
  description:
  - A drill bit is an important component of a drill.
  properties: [portable]

- name: box
  display:
    attr: wood
    char: '□'
  description:
  - A wooden box.  It can hold things.
  properties: [portable]

- name: gear
  display:
    attr: wood
    char: '*'
  description:
  - A wooden gear.
  properties: [portable]

- name: Linux
  display:
    attr: entity
    char: 'L'
  description:
  - A copy of the Linux operating system.
  properties: [portable]

############################################################
### Devices ################################################
############################################################

- name: treads
  display:
    attr: device
    char: '%'
  description:
  - Installing treads on a robot allows it to move (via the 'move' command) and turn
    (via the 'turn' command).
  - 'Example:'
  - '  move; turn left; move; turn north'
  capabilities: [move, turn]
  properties: [portable]

- name: grabber
  display:
    attr: device
    char: '<'
  description:
  - A grabber arm allows a robot to grab an item on its current cell, via the 'grab'
    command, or give an item to another robot on the same cell.
  - The 'grab' command takes no arguments; it simply grabs whatever is
    available.  It raises an exception if run in a cell that does not
    contain an item.
  - "The 'give' command takes two arguments: the name of the robot to
    give an item to, and the name of the item to give."
  capabilities: [grab, give]
  properties: [portable]

# XXX Another idea: give base a grabber; allow grabber to grab + place; but require another device for "give".

- name: solar panel
  display:
    attr: device
    char: '#'
  description:
  - An extremely efficient alien solar panel, capable of generating sufficient power
    from ambient starlight alone. A robot powered by one of these can operate any time,
    including on cloudy days and at night.
  properties: [portable]

- name: drill
  display:
    attr: device
    char: '!'
  description:
  - A drill allows robots to drill through rocks and mountains.
  properties: [portable]

- name: 3D printer
  display:
    attr: device
    char: '3'
  description:
  - A 3D printer gives you the capability of printing more robots! You
    can access the 3D printer via the 'build' command.
  - 'Example:'
  - '  build "fred" {move; grab; turn back; move; give "base"
    "tree"}'
  - |
    builds a robot named "fred" to get the tree on the cell to the
    east (if there is one) and bring it back to you. Note that if
    there is already a robot named "fred", the new robot will be given
    a similar but unique name.  The 'build' command always returns the
    name of the newly constructed robot. For example,
  - '  name <- build "fred" {move}; view name'
  - |
    builds a robot and then views it (no matter what it ends up being named).

  properties: [portable]
  capabilities: [build]

- name: dictionary
  display:
    attr: device
    char: 'D'

  description:
  - |
    A dictionary allows a robot to remember definitions and reuse them
    later.  You can access this ability with either a 'def' command,
    which creates a name for an expression or command that is
    available from then on, or with a 'let' expression, which names an
    expression or command locally within another expression.
  - '  def m2 : cmd () = move; move end'
  - '  let x : int = 3 in x^2 + 2*x + 1'
  - The type annotations in 'def' and 'let' are optional.

  properties: [portable]
  capabilities: [env]

- name: branch predictor
  display:
    attr: device
    char: 'y'
  description:
  - |
    A branch predictor is a device which allows a robot to interpret
    conditional expressions.  The syntax for a conditional expression
    is 'if' followed by three arguments: a boolean test and then
    two expressions of the same type.
  properties: [portable]
  capabilities: [cond]

############################################################
### Test entities ##########################################
############################################################

- name: flerb
  display:
    attr: entity
    char: '&'
  description:
  - It is a flerb.
  - What is a flerb, you ask? No one knows.
  properties: [portable, growable]

- name: elephant
  display:
    attr: rock
    char: 'E'
  description:
  - An elephant.
  - It is very big.
  properties: [unwalkable]
